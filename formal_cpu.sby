[tasks]
cover
--pycode-begin--
for t in "bmc prove".split():
  for o in "op op_imm lui auipc jal jalr branch csr lb lbu lh lhu lw sb sh sw fatal irq ecall".split():
    output(f"{o}-{t}")
--pycode-end--

[options]
--pycode-begin--
for t in "bmc prove".split():
  for o in "op op_imm lui auipc jal jalr branch csr lb lbu lh lhu lw sb sh sw fatal irq ecall".split():
    output(f"{o}-{t}: mode {t}")
--pycode-end--

multiclock on
cover: mode cover
cover: depth 50

--pycode-begin--
if task != "cover":
    ts = task.split("-")
    o = ts[0]
    t = ts[1]
    if o in "op op_imm lui auipc".split():
        output(f"{o}-bmc: depth 7")
        output(f"{o}-prove: depth 6")
    elif o in "jal jalr branch csr ecall".split():
        output(f"{o}-bmc: depth 13")
        output(f"{o}-prove: depth 12")
    elif o in "lb lbu lh lhu lw sb sh sw irq".split():
        output(f"{o}-bmc: depth 19")
        output(f"{o}-prove: depth 18")
    elif o in "fatal".split():
        output(f"{o}-bmc: depth 25")
        output(f"{o}-prove: depth 26")
--pycode-end--

[engines]
cover: smtbmc boolector

--pycode-begin--
if task != "cover":
  ts = task.split("-")
  o = ts[0]
  t = ts[1]
  if t == "bmc":
    output(f"{task}: smtbmc z3")
  else:
    output(f"{task}: smtbmc z3")
--pycode-end--

[script]
read_verilog <<END
module \$dff (CLK, D, Q);
  parameter WIDTH = 0;
  parameter CLK_POLARITY = 1'b1;
  input CLK;
  input [WIDTH-1:0] D;
  output reg [WIDTH-1:0] Q;
  \$ff #(.WIDTH(WIDTH)) _TECHMAP_REPLACE_ (.D(D),.Q(Q));
endmodule
END
design -stash dff2ff

cover: read_ilang toplevel.il

--pycode-begin--
if task != "cover":
  ts = task.split("-")
  o = ts[0]
  t = ts[1]
  output(f"{task}: read_ilang formal_cpu_{o}.il")
--pycode-end--

proc
attrmap -remove init a:uninitialized
techmap -map %dff2ff top/w:clk %co
prep -top top

[files]
cover: toplevel.il

--pycode-begin--
if task != "cover":
  ts = task.split("-")
  o = ts[0]
  t = ts[1]
  output(f"{task}: formal_cpu_{o}.il")
--pycode-end--
